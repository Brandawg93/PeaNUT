# Default values for pea-nut.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: brandawg93/peanut
  # pullPolicy should be 'Always' when tag is 'latest', otherwise it should be 'IfNotPresent'
  pullPolicy: IfNotPresent
  # tag identifies the container image release. If blank will use the chart's appVersion
  tag: ''

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []

# This is to override the chart name.
nameOverride: ''
fullnameOverride: ''

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ''

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80

# Container port configuration
containerPort: 8080

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ''
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: pea-nut.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: pea-nut-tls
  #    hosts:
  #      - pea-nut.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /api/ping
    port: http
readinessProbe:
  httpGet:
    path: /api/ping
    port: http

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

# Define the list of nut servers
nutServers: []
# Note: Property names must be upper-case
# - HOST: my-nut-server.local
#   PORT: 3493
#   USERNAME: observer
#   PASSWORD: secret-observer-pass

# Environment variables configuration
env:
  # Authentication
  WEB_USERNAME: ''
  AUTH_SECRET: ''

  # Web server configuration
  WEB_HOST: '0.0.0.0'

  # NUT server configuration (legacy single server)
  NUT_HOST: ''
  NUT_PORT: ''
  USERNAME: ''
  PASSWORD: ''

  # InfluxDB configuration
  INFLUX_HOST: ''
  INFLUX_TOKEN: ''
  INFLUX_ORG: ''
  INFLUX_BUCKET: ''
  INFLUX_INTERVAL: 10

  # Application configuration
  DISABLE_CONFIG_FILE: 'false'

  # Next.js configuration
  NODE_ENV: 'production'
  NEXT_TELEMETRY_DISABLED: '1'
  ANALYZE: 'false'
  BASE_PATH: ''

# Secrets configuration
secrets:
  # PeaNUT UI user password
  WEB_PASSWORD: ''
  # InfluxDB token (alternative to env.INFLUX_TOKEN)
  INFLUX_TOKEN: ''
